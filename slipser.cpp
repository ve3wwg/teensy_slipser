//////////////////////////////////////////////////////////////////////
// slipser.cpp -- SLIP Serial Class for Teensy-3.x
// Date: Mon May 19 16:41:50 2014
///////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <assert.h>

#include "slipser.hpp"

//////////////////////////////////////////////////////////////////////
// Serial RX Routine
//////////////////////////////////////////////////////////////////////

static uint8_t
slip_rx(void *arg) {
	SlipSer *obj = (SlipSer *)arg;

	return obj->rx_byte();
}

//////////////////////////////////////////////////////////////////////
// Serial TX Routine
//////////////////////////////////////////////////////////////////////

static void
slip_tx(uint8_t b,void *arg) {
	SlipSer *obj = (SlipSer *)arg;

	obj->tx_byte(b);
}

//////////////////////////////////////////////////////////////////////
// Serial flush routine
//////////////////////////////////////////////////////////////////////

static void
flush_tx(void *arg) {
	SlipSer *obj = (SlipSer *)arg;

	obj->tx_flush();
}

//////////////////////////////////////////////////////////////////////
// Constructor
//////////////////////////////////////////////////////////////////////

SlipSer::SlipSer(HardwareSerial& ser_dev) : serial(ser_dev), slip(slip_rx,slip_tx,this,flush_tx) {
	buffer = 0;
	rxlength = 0;
}

//////////////////////////////////////////////////////////////////////
// Initialize for I/O
//////////////////////////////////////////////////////////////////////

void
SlipSer::open(uint32_t baud,char *rxbuffer,unsigned maxbuflen,uint32_t format) {

	close();				// Release existing buffer
	buffer = rxbuffer;			// I/O buffer to use
	rxlength = maxbuflen;			// Maximum receive length
	serial.begin(baud,format);		// Set baud rate and format
}

//////////////////////////////////////////////////////////////////////
// Release I/O buffer
//////////////////////////////////////////////////////////////////////

void
SlipSer::close() {
	if ( buffer ) {
		buffer = 0;
		rxlength = 0;
	}
}

//////////////////////////////////////////////////////////////////////
// Transmit a packet
//////////////////////////////////////////////////////////////////////

void
SlipSer::write(const void *buffer,unsigned length) {
	slip.write(buffer,length);
}

//////////////////////////////////////////////////////////////////////
// Receive a packet
//////////////////////////////////////////////////////////////////////

void *
SlipSer::read(unsigned& length) {
	SLIP::Status s;

	if ( !buffer )
		return 0;			// Device not open yet

	while ( (s = slip.read(buffer,rxlength,length)) != SLIP::ES_Ok )
                ;
	return buffer;
}

// End slipser.cpp
